load("@aspect_rules_ts//ts:defs.bzl", "ts_project", "ts_config")
load("@aspect_rules_js//js:defs.bzl", "js_binary")
load("@npm//:defs.bzl", "npm_link_all_packages")

npm_link_all_packages(name = "node_modules")

ts_config(
  name = "tsconfig",
  src = "tsconfig.json",
  deps = [":node_modules/@suggester/configs"],
)

ts_project(
  name = "commands-ts",
  srcs = glob(["src/**/*.ts", "scripts/**/*.ts"]),
  tsconfig = ":tsconfig",
  source_map = True,
  declaration = True,
  out_dir = "build",
  deps = [
    "//:node_modules/@types/node",
    ":node_modules/@suggester/database",
    ":node_modules/@suggester/framework",
    ":node_modules/@suggester/i18n",
    ":node_modules/@suggester/util",
    ":node_modules/@suggester/types",
    ":node_modules/@sentry/integrations",
    ":node_modules/@sentry/node",
    ":node_modules/@sentry/tracing",
    ":node_modules/@aws-sdk/client-s3",
    ":node_modules/discord-api-types",
    ":node_modules/fastify",
    ":node_modules/undici",
    ":node_modules/zod",
  ],
  assets = ["//:lang-files"],
)

js_binary(
  name = "commands",
  data = [
    ":commands-ts",
    "package.json",
    "//:config",
  ],
  entry_point = "build/src/index.js"
)

js_binary(
  name = "create-cmds",
  data = [
    ":commands-ts",
    "package.json",
    "//:config",
  ],
  entry_point = "build/scripts/createCommands.js"
)

# --- TODO: DOCKER ---

# load("@io_bazel_rules_docker//container:layer.bzl", "container_layer")
# load("@io_bazel_rules_docker//container:container.bzl", "container_image")

# separate js_binary rule for this so the config is not required
# to build. instead, it will be added via bind mount
# js_binary(
#   name = "commands-docker",
#   data = [
#     ":commands-ts",
#     "package.json",
#   ],
#   entry_point = "build/src/index.js"
# )


# # returns an output group with `app` and `node_modules`
# js_image_layer(
#   name = "layers",
#   binary = ":commands-docker",
#   root = "/app",
# )

# filegroup(
#   name = "app_tar",
#   srcs = [":layers"],
#   output_group = "app",
# )

# filegroup(
#   name = "node_modules_tar",
#   srcs = [":layers"],
#   output_group = "node_modules",
# )

# container_layer(
#   name = "app_layer",
#   tars = [":app_tar"],
# )

# container_layer(
#   name = "node_modules_layer",
#   tars = [":node_modules_tar"],
# )

# # TODO: can this be done without bash?
# container_image(
#   name = "image",
#   base = "@node19_base//image",
#   cmd = ["./services/commands/commands-docker"],
#   workdir = "/app",
#   entrypoint = ["bash"],
#   repository = "docker.io",
#   layers = [
#     ":app_layer",
#     ":node_modules_layer",
#   ],
# )
